# pylint: disable=no-member
# pylint: disable=broad-except
# pylint: disable=line-too-long

import base64
import re
from io import BytesIO
import cv2
import numpy as np
import pytesseract
from PIL import Image, ImageFilter, ImageOps

# Captura a string base64 (remova espa√ßos extras)
CAPTCHA_BASE64 = """
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
"""  # Insira sua string Base64 completa aqui

# 1Ô∏è‚É£ Remover prefixo "data:image/png;base64," se existir
CAPTCHA_BASE64 = re.sub(r'^data:image/[^;]+;base64,', '', CAPTCHA_BASE64).strip()

# 2Ô∏è‚É£ Remover espa√ßos extras e corrigir padding (evita erro de "Incorrect padding")
CAPTCHA_BASE64 = CAPTCHA_BASE64.replace(" ", "").replace("\n", "")
missing_padding = len(CAPTCHA_BASE64) % 4
if missing_padding:
    CAPTCHA_BASE64 += "=" * (4 - missing_padding)

# 3Ô∏è‚É£ Decodifica o Base64 e converte para imagem
try:
    captcha_bytes = base64.b64decode(CAPTCHA_BASE64)
    captcha_image = Image.open(BytesIO(captcha_bytes))
    captcha_image.save("captcha_original.png")  # Salvar original para depura√ß√£o
except Exception as e:
    print(f"[ERRO] Falha ao decodificar Base64: {e}")
    exit(1)

# 4Ô∏è‚É£ Convertendo a imagem para escala de cinza
captcha_image = captcha_image.convert("L")

# 5Ô∏è‚É£ Aplicando filtros para melhorar a precis√£o do OCR
captcha_image = captcha_image.filter(ImageFilter.MedianFilter(size=3))  # Remove ru√≠dos
captcha_image = ImageOps.invert(captcha_image)  # Inverte cores (opcional)

# Converter a imagem PIL para OpenCV
image_cv = np.array(captcha_image)

# 6Ô∏è‚É£ Aplicar processamento de imagem com OpenCV para reduzir ru√≠do
image_cv = cv2.GaussianBlur(image_cv, (1, 1), 0)  # Suaviza√ß√£o
_, image_cv = cv2.threshold(image_cv, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)  # Binariza√ß√£o adaptativa

# 7Ô∏è‚É£ Aplicar opera√ß√µes morfol√≥gicas para melhorar caracteres
kernel = np.ones((2, 2), np.uint8)
image_cv = cv2.morphologyEx(image_cv, cv2.MORPH_CLOSE, kernel)  # Fechamento para unir partes quebradas

# Converter de volta para PIL
captcha_image = Image.fromarray(image_cv)
captcha_image.save("captcha_processado.png")  # Salvar imagem processada para depura√ß√£o

# 8Ô∏è‚É£ Configura√ß√£o do Tesseract OCR
pytesseract.pytesseract.tesseract_cmd = r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"

# üîπ Configura√ß√£o aprimorada para reconhecer letras e n√∫meros üîπ
CUSTOM_CONFIG = r'--oem 3 --psm 7 -c tessedit_char_whitelist=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

# 9Ô∏è‚É£ Executar OCR e extrair texto
try:
    captcha_text = pytesseract.image_to_string(captcha_image, config=CUSTOM_CONFIG).strip()
    print("Texto extra√≠do do Captcha:", captcha_text)
except Exception as e:
    print(f"[ERRO] Falha ao processar OCR: {e}")
